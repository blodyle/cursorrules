# QuickRecipe - Recipe Finder Application

## 1. Project Overview
  ### Purpose
  A simple recipe finder application that helps users discover cooking recipes based on available ingredients in their kitchen. The app focuses on reducing food waste and making cooking accessible to everyone by suggesting recipes with ingredients users already have.

  ### Target Audience
  - Primary: Home cooks looking for recipe ideas
  - Secondary: Students and busy professionals with limited ingredients

  ### Tech Stack
  - **Frontend:** [Next.js (v14.0.0)](https://nextjs.org/docs) with App Router
  - **Backend:** [Next.js API Routes](https://nextjs.org/docs/api-routes/introduction)
  - **Database:** [MongoDB (v7.0)](https://www.mongodb.com/docs/) for flexible recipe storage
  - **Styling:** [Tailwind CSS (v3.3.0)](https://tailwindcss.com/docs)
  - **Search:** [Algolia (v4.22.1)](https://www.algolia.com/doc/) for ingredient-based search
  - **Image Storage:** [Cloudinary](https://cloudinary.com/documentation) for recipe images

  ### Project Information
  - **Name:** QuickRecipe
  - **Website:** quickrecipe.example.com
  - **Repository:** github.com/example/quickrecipe
  - **License:** MIT

## 2. Core Design Rules
  ### UI/UX Guidelines
  1. **Responsive Design:** Adapt layout for kitchen use on mobile devices
  2. **Navigation:** Simple search bar and ingredient filter system
  3. **Color Scheme:**
     - `primary`: #22C55E (green-500) for fresh/organic feel
     - `secondary`: #F97316 (orange-500) for appetizing accents
  4. **Typography:** Clear, readable fonts for recipe instructions
  5. **Components:** Use shadcn/ui with custom recipe cards
  6. **Accessibility:** High contrast for kitchen visibility
  7. **Language:** English with ingredient names in multiple languages

  ### Development Standards
  1. **Code Style:** ESLint with Prettier integration
  2. **Documentation:** Clear recipe schema documentation
  3. **Testing:** Cypress for recipe search flows
  4. **Performance:** Image optimization for recipes
  5. **Security:** API rate limiting for search

## 3. Core Features and Areas
  1. **Recipe Search**
     - Purpose: Find recipes by ingredients
     - Core functionality: Ingredient-based search
     - Technical requirements: Algolia integration
     - User interactions: Add/remove ingredients

  2. **Recipe Display**
     - Purpose: Show recipe details clearly
     - Core functionality: Step-by-step instructions
     - Technical requirements: Responsive images
     - User interactions: Serving size adjustment

  3. **Favorites**
     - Purpose: Save preferred recipes
     - Core functionality: Bookmark system
     - Technical requirements: Local storage
     - User interactions: Save/unsave recipes

## 4. Development Guidelines
  ### Frontend
  - Optimize images with next/image
  - Implement progressive loading for recipes
  - Use static generation for popular recipes
  - Keep search interface simple
  - Implement offline recipe viewing

  ### Backend
  - Cache common search queries
  - Validate recipe data structure
  - Implement ingredient normalization
  - Handle recipe ratings
  - API endpoints for recipe CRUD

## 5. Cursor-Specific Guidelines
  ### AI Interaction Rules
  1. **File Organization:**
     - `/app` - Next.js app router pages
     - `/components` - Recipe-related components
     - `/lib` - Search and data utilities
     - `/public` - Static recipe images

  2. **Code Documentation:**
     - Document recipe schema
     - Explain search algorithms
     - Comment image optimization logic

  3. **Component Guidelines:**
     - Separate recipe card components
     - Create reusable ingredient filters
     - Modular recipe instruction display

  4. **Testing Approach:**
     - Test search functionality
     - Verify recipe calculations
     - Ensure mobile usability

  5. **Error Handling:**
     - Handle missing ingredients
     - Manage image loading failures
     - Provide search fallbacks

## 6. Additional Notes
  - Image Guidelines: Max 800x600, WebP format
  - Offline Support: Cache recent recipes
  - Performance: < 2s recipe load time
  - Accessibility: Recipe steps keyboard navigable
  - Mobile Support: Touch-friendly recipe controls 