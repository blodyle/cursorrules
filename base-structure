# [Project Name]
Replace with your project name. Make it descriptive and clear.

## 1. Project Overview
  ### Purpose
  Provide a clear, concise description of what your project does and why it exists.
  Example: "A web application that helps users track their daily water intake..."

  ### Target Audience
  List your primary and secondary user groups. Be specific about who will use your application.
  Example:
  - Primary: Health-conscious individuals aged 25-45
  - Secondary: Fitness trainers and health coaches

  ### Tech Stack
  List all major technologies with versions and documentation links
  Always specify versions to ensure consistency
  Example format:
  - Frontend: [Next.js (v14.0.0)](https://nextjs.org/docs)
  - Database: [PostgreSQL (v15.0)](https://www.postgresql.org/docs/)
  Add any specific configurations or requirements for each technology

  ### Project Information
  Add relevant project/company details
  - Project Name
  - Website
  - Contact Information
  - Repository
  - License

## 2. Core Design Rules
  ### UI/UX Guidelines
  List your core design principles and rules
  Example:
  1. **Responsive Design:** How your app should behave across different devices
  2. **Navigation:** Core navigation patterns and rules
  3. **Color Scheme:** Define your color palette and usage rules
  4. **Typography:** Font choices and text hierarchy
  5. **Components:** Reusable component guidelines
  6. **Accessibility:** WCAG compliance level and specific requirements
  7. **Language:** Specify language rules for code and content

  ### Development Standards
  Define coding standards and practices
  1. **Code Style:** Linting rules and formatting standards
  2. **Documentation:** How and what to document
  3. **Testing:** Testing requirements and coverage expectations
  4. **Performance:** Performance budgets and optimization rules
  5. **Security:** Security requirements and best practices

## 3. Core Features and Areas
  List main features and functionalities
  For each feature, include:
  - Purpose
  - Core functionality
  - Technical requirements
  - User interactions
  Example:
  1. User Authentication
     - Purpose: Secure user access
     - Core functionality: Login, registration, password reset
     - Technical requirements: JWT, OAuth
     - User interactions: Login forms, verification emails

## 4. Development Guidelines
  ### Frontend
  Specify frontend-specific rules
  Example:
  - Component structure and organization
  - State management approach
  - Routing conventions
  - Asset management
  - Performance optimization techniques

  ### Backend
  Specify backend-specific rules
  Example:
  - API design principles
  - Error handling standards
  - Database schema conventions
  - Caching strategies
  - Security measures

  ### DevOps
  Define deployment and operations guidelines
  Example:
  - CI/CD pipeline requirements
  - Environment configurations
  - Monitoring and logging
  - Backup strategies

## 5. Cursor-Specific Guidelines
  ### AI Interaction Rules
  Help Cursor AI understand your project better
  1. **File Organization:**
     - Keep related files close together
     - Use clear, descriptive file names
     - Maintain a logical folder structure

  2. **Code Documentation:**
     - Write clear comments for complex logic
     - Include JSDoc/TSDoc for functions
     - Explain business logic in comments

  3. **Component Guidelines:**
     - Separate client and server components
     - Keep components focused and single-purpose
     - Document props and state management

  4. **Testing Approach:**
     - Write descriptive test names
     - Group related tests
     - Include setup and teardown explanations

  5. **Error Handling:**
     - Use descriptive error messages
     - Implement proper error boundaries
     - Log errors appropriately

## 6. Additional Notes
  Add any project-specific guidelines or requirements
  Example:
  - Third-party service integrations
  - Legal requirements
  - Compliance standards
  - Performance requirements
  - Browser/device support requirements 